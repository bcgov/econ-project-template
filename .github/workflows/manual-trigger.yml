# This is a basic workflow that is manually triggered

name: Workflow - Run manual trigger

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Environment'
        # Default value if no value is explicitly provided
        default: 'dev'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
env:
  TARGET_ENV: ${{ inputs.name }} 
  OC_CLUSTER: ${{ vars.OPENSHIFT_CLUSTER }}
  OC_REGISTRY: ${{ vars.OPENSHIFT_REGISTRY }}
  OC_AUTH_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OC_TARGET_PROJECT: ${{ vars.OPENSHIFT_NAMESPACE }}
  JFROG_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  JFROG_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  JFROG_REPO_PATH: ${{ vars.ARTIFACTORY_REPO }}
  JFROG_SERVICE:  ${{ vars.ARTIFACTORY_SERVICE }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  setup:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    environment: ${{ inputs.name }}
    steps:
    # Runs a single command using the runners shell
    - name: Get variables
      run: |
        echo "target=${{ inputs.name }} "
        echo "base=$GITHUB_REF_NAME"
        echo "Environment: ${{ inputs.name }} OC_TARGET_PROJECT=$OC_TARGET_PROJECT"
        echo "Environment: ${{ inputs.name }} JFROG_REPO_PATH=$JFROG_REPO_PATH"
        echo "..."
        env | sort
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.name }}
    steps:
    - uses: actions/checkout@v4
    - name: Build dotnetapp docker images
      run: docker compose build
      working-directory: ./applications/dotnetapp
    - name: Build aspnetapp docker images
      run: docker compose build
      working-directory: ./applications/aspnetapp
    - name: Connect to JFrog Artifactory non-interactive login using --password-stdin
      run: |
        echo "$JFROG_PASSWORD" | docker login -u "$JFROG_USERNAME" --password-stdin $JFROG_SERVICE
    - name: Push application images to Artifactory container registry
      run:  | 
        docker tag dotnetapp $JFROG_SERVICE/$JFROG_REPO_PATH/dotnetapp
        docker push $JFROG_SERVICE/$JFROG_REPO_PATH/dotnetapp
        docker tag aspnetapp $JFROG_SERVICE/$JFROG_REPO_PATH/aspnetapp
        docker push $JFROG_SERVICE/$JFROG_REPO_PATH/aspnetapp
    - name: Disconnect docker from JFrog Artifactory
      run: |
        docker logout
    - name: Connect to OpenShift API non-interactive login using current session token
      run: |
        oc login --token=$OC_AUTH_TOKEN --server=$OC_CLUSTER
        oc registry login
        docker login -u unused -p $(oc whoami -t) $OC_REGISTRY
    - name: Push application images to OpenShift container registry
      run:  | 
        docker tag dotnetapp $OC_REGISTRY/$OC_TARGET_PROJECT/dotnetapp
        docker push $OC_REGISTRY/$OC_TARGET_PROJECT/dotnetapp
        docker tag aspnetapp $OC_REGISTRY/$OC_TARGET_PROJECT/aspnetapp
        docker push $OC_REGISTRY/$OC_TARGET_PROJECT/aspnetapp
    - name: Disconnect docker from OpenShift container registry
      run: |
        docker logout
