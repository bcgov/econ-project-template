name: Main - Build & Push docker images

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.github/**'
      - '.gitignore'
      - 'database/**'
      - 'documentation/**'
      - 'openshift/**'
      - 'tests/**'
      - 'CODE_OF_CONDUCT.md'
      - 'COMPLIANCE.yaml'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'README.md'
      - 'SECURITY.md'

env:
  TARGET_ENV: test 
  OC_CLUSTER: ${{ vars.OPENSHIFT_CLUSTER }}
  OC_REGISTRY: ${{ vars.OPENSHIFT_REGISTRY }}
  OC_AUTH_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OC_TARGET_PROJECT: ${{ vars.OPENSHIFT_NAMESPACE }}
  JFROG_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  JFROG_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  JFROG_REPO_PATH: ${{ vars.ARTIFACTORY_REPO }}
  JFROG_SERVICE:  ${{ vars.ARTIFACTORY_SERVICE }}
  UGM_BUILD_VERSION: ${{vars.UGM_BUILD_VERSION}}
  UGM_BUILD_REVISION: ${{vars.UGM_BUILD_REVISION}}

  UGM_RELEASE_PREFIX: API_v
  UGM_RELEASE_MESSAGE: Test

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    environment: test
    steps:
    # Runs commands using the runners shell
    - name: Get variables
      run: |
        echo "target=$TARGET_ENV"
        echo "base=$GITHUB_REF_NAME"
        echo "Environment: $TARGET_ENV OC_TARGET_PROJECT=$OC_TARGET_PROJECT"
        echo "Environment: $TARGET_ENV JFROG_REPO_PATH=$JFROG_REPO_PATH"
        echo "..."
        env | sort

  # This workflow contains jobs called "GenerateTag" "PushTag" "Build"
  GenerateTag:
    runs-on: ubuntu-latest
    environment: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
          fetch-depth: '0'
    - name: Get current date
      id: date-selector
      run: echo "date=$(date +'%B %e, %Y')" >> $GITHUB_OUTPUT
    - name: Generate Next Git Tag
      id: tag-selector
      run: |
        # Extract the major and minor version parts using grep
        MAJOR_VERSION=$(echo "${{env.UGM_BUILD_VERSION}}" | grep -oE '^[0-9]+')
        MINOR_VERSION=$(echo "${{env.UGM_BUILD_VERSION}}" | grep -oE '\.[0-9]+' | grep -oE '[0-9]+')
        VERSION_PATCH=$(echo "${{env.UGM_BUILD_VERSION}}" | grep -oE '[0-9]+$')
        VERSION_PATCH=$((VERSION_PATCH + 1))
        env | sort
        # Construct the new tag
        NEW_TAG="${{env.UGM_RELEASE_PREFIX}}${MAJOR_VERSION}.${MINOR_VERSION}.${VERSION_PATCH}"
        echo "gittag=${NEW_TAG}" >> $GITHUB_OUTPUT
        echo "tagmsg=${{env.UGM_RELEASE_MESSAGE}} ${{steps.date-selector.outputs.date}}" >> $GITHUB_OUTPUT
        echo "tagversion=${MAJOR_VERSION}.${MINOR_VERSION}.${VERSION_PATCH}" >> $GITHUB_OUTPUT
    - name: Create Git Tag
      run: |
        git config user.name "GitHub Actions 1"
        git config user.email "github-actions@users.noreply.github.com"
        git tag -a "${{steps.tag-selector.outputs.gittag}}" -m "${{steps.tag-selector.outputs.tagmsg}}"
        git push origin "${{steps.tag-selector.outputs.gittag}}"
    - name: Set repository version variable
      id: setversion
      run: | 
        gh variable list --env test 
        gh variable set UGM_BUILD_VERSION --env test --body "1.1.1"
    outputs: 
      TAGNAME: ${{steps.tag-selector.outputs.gittag}}
      TAGMESSAGE: ${{steps.tag-selector.outputs.tagmsg}}
      TAGPATCH: ${{steps.tag-selector.outputs.tagversion}}

  build:
    runs-on: ubuntu-latest
    environment: test
    steps:
    - uses: actions/checkout@v4
    - name: Build dotnetapp docker images
      run: docker compose build
      working-directory: ./applications/dotnetapp
    - name: Build aspnetapp docker images
      run: docker compose build
      working-directory: ./applications/aspnetapp
    - name: Get BuildId
      id: commit
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: Set buildArgs
      run:  |
        echo "buildArgs UNITY_BUILD_VERSION: ${{env.UGM_BUILD_VERSION}}, UNITY_BUILD_REVISION: ${{env.UGM_BUILD_REVISION}}"
    - name: Build Docker images
      run: |
        rm -f ./docker-compose.override.yml
        docker compose build --build-arg UNITY_BUILD_VERSION=${{env.UGM_BUILD_VERSION}} --build-arg UNITY_BUILD_REVISION=${{env.UGM_BUILD_REVISION}}
      working-directory: ./applications/Unity.GrantManager

    - name: Connect to JFrog Artifactory non-interactive login using --password-stdin
      run: |
        echo "$JFROG_PASSWORD" | docker login -u "$JFROG_USERNAME" --password-stdin $JFROG_SERVICE
    - name: Push application images to Artifactory container registry
      run:  | 
        docker tag dotnetapp $JFROG_SERVICE/$JFROG_REPO_PATH/dotnetapp:stable
        docker push $JFROG_SERVICE/$JFROG_REPO_PATH/dotnetapp:stable
        docker tag aspnetapp $JFROG_SERVICE/$JFROG_REPO_PATH/aspnetapp:stable
        docker push $JFROG_SERVICE/$JFROG_REPO_PATH/aspnetapp:stable
        docker tag unity-grantmanager-dbmigrator $JFROG_SERVICE/$JFROG_REPO_PATH/unity-grantmanager-dbmigrator:stable
        docker push $JFROG_SERVICE/$JFROG_REPO_PATH/unity-grantmanager-dbmigrator:stable
        docker tag unity-grantmanager-web $JFROG_SERVICE/$JFROG_REPO_PATH/unity-grantmanager-web:stable
        docker push $JFROG_SERVICE/$JFROG_REPO_PATH/unity-grantmanager-web:stable
    - name: Disconnect docker from JFrog Artifactory
      run: |
        docker logout
    - name: Connect to OpenShift API non-interactive login using current session token
      run: |
        oc login --token=$OC_AUTH_TOKEN --server=$OC_CLUSTER
        oc registry login
        docker login -u unused -p $(oc whoami -t) $OC_REGISTRY
    - name: Push application images to OpenShift container registry
      run:  | 
        docker tag dotnetapp $OC_REGISTRY/$OC_TARGET_PROJECT/dotnetapp:stable
        docker push $OC_REGISTRY/$OC_TARGET_PROJECT/dotnetapp:stable
        docker tag aspnetapp $OC_REGISTRY/$OC_TARGET_PROJECT/aspnetapp:stable
        docker push $OC_REGISTRY/$OC_TARGET_PROJECT/aspnetapp:stable
        docker tag unity-grantmanager-dbmigrator $OC_REGISTRY/$OC_TARGET_PROJECT/unity-grantmanager-dbmigrator:stable
        docker push $OC_REGISTRY/$OC_TARGET_PROJECT/unity-grantmanager-dbmigrator:stable
        docker tag unity-grantmanager-web $OC_REGISTRY/$OC_TARGET_PROJECT/unity-grantmanager-web:stable
        docker push $OC_REGISTRY/$OC_TARGET_PROJECT/unity-grantmanager-web:stable
    - name: Disconnect docker from OpenShift container registry
      run: |
        docker logout
